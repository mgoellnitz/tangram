/**
 *
 * Copyright 2011-2015 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import org.gradle.api.artifacts.ExcludeRule
import org.gradle.api.artifacts.ModuleDependency
import org.gradle.api.internal.java.JavaLibrary
import org.gradle.api.internal.component.Usage
import groovy.util.Node

version = '1.1-SNAPSHOT'

def release = project.hasProperty('release')

if (release) {
  apply plugin: 'pmd'
}
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'tangram'

repositories {
  jcenter()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Project specific default output directory
eclipse.classpath.conventionMapping.defaultOutputDir = { new File("$buildDir/classes/main") }

if (release) {
  pmd {
    ruleSets = []
    ruleSetFiles = files("$project.rootProject.projectDir/pmd.xml")
    sourceSets = [sourceSets.main]
    toolVersion = '5.1.1' // We'd love to have a later version like 5.3.4 but travis seems to have a probem with this.
  }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

compileJava.doLast {
  // do this here to avoid compiling without source changes since this here is a source change
  incrementBuildCounter(project)
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from "${buildDir}/docs/javadoc"
}

class WrappedRuntimeUsage implements Usage {

  private Usage delegate;

  WrappedRuntimeUsage(Usage usage) {
    delegate = usage
  }

  public String getName() {
    return delegate.name
  }


  public Set<org.gradle.api.artifacts.PublishArtifact> getArtifacts() {
    return delegate.artifacts
  }


  public Set<org.gradle.api.artifacts.ModuleDependency> getDependencies() {
    Set<org.gradle.api.artifacts.ModuleDependency> result = new HashSet<>()
    delegate.dependencies.each {
      if (!result.contains(it)) {
        result.add(it)
      } else {
        println "Ignoring another $it.group:$it.name:$it.version"
      }
    }
    return result
  }

}

class WrappedLibrary implements org.gradle.api.internal.component.SoftwareComponentInternal {

  private JavaLibrary delegate;

  WrappedLibrary(JavaLibrary lib) {
    delegate = lib;
  }

  public String getName() {
    return delegate.name
  }

  public Set<Usage> getUsages() {
    Set<Usage> result = new HashSet<>()
    delegate.usages.each {
      result.add(new WrappedRuntimeUsage(it))
    }
    return result
  }

}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom.withXml {
        def pom = asNode()
        pom.dependencies.'*'.findAll() {
          it.scope.text() == 'runtime'  && project.configurations.providedCompile.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each() {
          it.scope*.value = 'provided'
        }
        def first = pom.children().get(0)
        first.plus {
          new Node(pom, 'name', 'Tangram')
          new Node(pom, 'description', 'Object oriented templating and dynamic web development framework')
          new Node(pom, 'url', 'https://github.com/mgoellnitz/tangram/')
          def scm = new Node(pom, 'scm')
          scm.appendNode('connection', 'scm:git:git@github.com:mgoellnitz/tangram.git')
          scm.appendNode('developerConnection', 'scm:git:git@github.com:mgoellnitz/tangram.git')
          scm.appendNode('url', 'git@github.com:mgoellnitz/tangram.git')
          scm
          def license = new Node(pom, 'licenses').appendNode('license')
          license.appendNode('name', 'LGPL-3.0')
          license.appendNode('url', 'http://opensource.org/licenses/LGPL-3.0')
          license
        }
        def developer = pom.appendNode('developers').appendNode('developer')
        developer.appendNode('name', 'Martin Goellnitz')
        developer.appendNode('organization', 'Provocon')
        developer.appendNode('organizationUrl', 'http://www.provocon.de/')
      }
      from new WrappedLibrary(components.java)
      if (release) {
        artifact sourcesJar
        artifact javadocJar
      }
      configurations[JavaPlugin.RUNTIME_CONFIGURATION_NAME].allDependencies.findAll {
        it instanceof ModuleDependency && !it.excludeRules.isEmpty()
      }.each { ModuleDependency dep ->
        pom.withXml {
          def xmlDep = asNode().dependencies.dependency.find {
            it.groupId[0].text() == dep.group && it.artifactId[0].text() == dep.name
          }
          if (xmlDep) {
            def xmlExclusions = xmlDep.exclusions[0]
            if (!xmlExclusions) {
              xmlExclusions = xmlDep.appendNode('exclusions')
            }
            dep.excludeRules.each { ExcludeRule rule ->
              def xmlExclusion = xmlExclusions.appendNode('exclusion')
              xmlExclusion.appendNode('groupId', rule.group)
              xmlExclusion.appendNode('artifactId', rule.module)
            }
          }
        }
      }
    }
  }
}
