/**
 * 
 * Copyright 2011 Martin Goellnitz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

/* version section */
servlet_spec = "2.5"
jsp_spec = "2.0"
groovy_version = "1.8.3"
velocity_version = "1.7"
// TODO: find repo for 2.8.2
yui_version="2.4.6"
// TODO: yui compressor uses its own old version
rhino_version="1.7R3"
// TODO: find repo for 1.8.1.3
hsqldb_version="1.8.0.10"
jdo_api="javax.jdo:jdo2-api:2.3-eb"

springframework_version = "3.0.6.RELEASE"
springsecurity_version = "3.0.7.RELEASE"
// Datanucleus Version except for Google App Engine
// TODO: Where is the 3.0.2 enhancer?
datanucleus_version= "3.0.1"

appengine_version = "1.5.5"
/* version section end */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'maven'

repositories {

  mavenLocal()
  
  ivy { url "myvy" }

  // most of the usual stuff
  maven { url "http://repo1.maven.org/maven2" }
  // needed for latest spring framework and security versions
  maven { url "http://repository.springsource.com/maven/bundles/release" }
  // needed for latest datanucleus versions
  maven { url "http://www.datanucleus.org/downloads/maven2" }
  
}

version = '0.6-SNAPSHOT'
basename = 'tangram'

// datanucleus enhancer doesnt support this, but it works!
sourceCompatibility = 1.6
targetCompatibility = 1.6

// our custom directory layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
}

// despite the short directory names we won't full blown archive names
archivesBaseName = basename+'-'+project.name

// avoid gradles default mimik to fiddle around with this directory
webAppDirName = 'disabled'

// we want jars and wars - in most cases
jar.enabled = true 

// needed for building jars and wars
configurations {
  libs 
  webapp
}

// needed for building jars and wars
artifacts {
  archives war
  libs jar
}

compileJava.doLast {
  // update build number after build 
  // do this here to avoid compiling without source changes since this here is a source change
  filename = "${project.rootDir.absolutePath}/${project.name}/src/$basename/${project.name}-build.properties".toString()
  Properties p = new Properties()
  try {
    FileInputStream fis = new FileInputStream(filename);
    p.load(fis)
    fis.close()
  } catch (Exception e) {
   // 
  }
  p.setProperty("version.date", ""+(new Date()))
  p.setProperty("version.build", ""+(Integer.parseInt(p.getProperty("version.build", "0"))+1))
  FileOutputStream fos = new FileOutputStream(filename)
  p.save(fos, " Tangram Build and System Information")
  fos.close()
  // JDO Enhancing is not really done when we start this - sorry - so we wait a little
  print "waiting 3s - which is normal in this project"
  Thread.currentThread().sleep(3000)
  println " - done"
}

/* TODO:
ant.taskdef(name:"yui-compressor", 
                 classname: "net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask",
                 classpath: configurations.compile.asPath+";../core/lib/yui-compressor-ant-task-0.5.jar")
*/

war.doFirst {
  // Strange way of overwriting things - it must be the first webapp dependency
  iter = configurations.webapp.dependencies.iterator()
  if (iter.hasNext()) {
    firstWebappDependency = iter.next()
    if (firstWebappDependency instanceof org.gradle.api.artifacts.ProjectDependency) {
      archiveFileName = firstWebappDependency.dependencyProject.war.outputs.files.singleFile.absolutePath
      /*
      idx = archiveFileName.indexOf(';')
      if (idx >= 0) {
        archiveFileName = archiveFileName.substring(0, idx)
      } // if
      */
      ant.unzip(src: archiveFileName, dest: "$buildDir/target")  
    } else {
      println "WARNING: MISSING WAR TO ADD LOCAL FILES TO!"
    } // if 
  } // if 
  
  // TODO: YUICompressor!
  copy {
    from 'webapp'
    into "$buildDir/target"
    include '**/**'
  }
  
  into ('') {
    from "$buildDir/target"
    exclude 'WEB-INF/lib/**'
  }
}

war {
  // For some reason webapp files are not included in the inputs collection
  FileTree tree = fileTree(dir: 'webapp')
  inputs.files tree
  // And also ther web-archive of the upstream project has to be added
  iter = configurations.webapp.dependencies.iterator()
  if (iter.hasNext()) {
    firstWebappDependency = iter.next()
    if (firstWebappDependency instanceof org.gradle.api.artifacts.ProjectDependency) {
      println "Adding "+firstWebappDependency.dependencyProject.war.outputs.files.singleFile.name
      inputs.file firstWebappDependency.dependencyProject.war.outputs.files.singleFile
    } else {
      println "WARNING: MISSING WAR TO ADD LOCAL FILES TO!"
    } // if 
  } // if 
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
}

// just for debugging purposes
war.doLast {
  ant.unzip(src: war.archivePath, dest: "$buildDir/war")
}

uploadArchives {
  inputs.dir file("$buildDir/libs")
  repositories.mavenDeployer {
      repository(url: repositories.mavenLocal().url)
      // TODO: change this when we know how to rename sub projects
      // depends on http://issues.gradle.org/browse/GRADLE-1135
      // pom.artifactId = basename+'-'+project.name+'-webapp'
      pom.artifactId = project.name+'-webapp'
  }
}

uploadLibs {
  inputs.dir file("$buildDir/libs")
  repositories.mavenDeployer {
      repository(url: repositories.mavenLocal().url)
      // TODO: remove this when we know how to rename sub projects
      // depends on http://issues.gradle.org/browse/GRADLE-1135
      pom.artifactId = project.name
  }
}

task upload(dependsOn: [uploadArchives, uploadLibs]) {
}

println "project: "+project.name