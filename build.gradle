/**
 *
 * Copyright 2011-2015 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import org.gradle.api.Project

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
  }
}

plugins {
  id 'com.github.kt3k.coveralls' version '2.4.0x'
}

allprojects {
  defaultTasks 'clean', 'build', 'publishToMavenLocal'
  apply plugin: 'java'
  apply plugin: 'jacoco'
  // our custom directory layout
  sourceSets {
    main {
      java {
        srcDir 'src'
        exclude '**/*.properties'
        exclude '**/*.xml'
      }
      resources {
        srcDir 'src'
        exclude '**/*.java'
      }
    }
    test {
      java {
        srcDir 'test'
        exclude '**/*.properties'
        exclude '**/*.xml'
      }
      resources {
        srcDir 'test'
        exclude '**/*.java'
      }
    }
  }
  test {
    useTestNG()
  }
}

repositories {
  jcenter()
}

/**
 *  Helper method to increment a build counter in each subproject to have build numbers
 *  built into the packages to be able to track any change
 */
public incrementBuildCounter(Project prj) {
  println "Updating compile counter property file ${prj.projectDir.name}-build.properties"
  String dirname = "${prj.projectDir.canonicalPath}/src/${prj.parent.name}"
  File dir = new File(dirname)
  if (!dir.exists()) {
    dir.mkdir()
  } // if
  String filename = "${dirname}/${prj.projectDir.name}-build.properties"
  Properties p = new Properties()
  try {
    FileInputStream fis = new FileInputStream(filename)
    p.load(fis)
    fis.close()
  } catch (Exception e) {
    //
  } // try/catch
  p.setProperty('version.date', ""+(new Date()))
  p.setProperty('version.build', ""+(Integer.parseInt(p.getProperty('version.build', '0'))+1))
  FileOutputStream fos = new FileOutputStream(filename)
  p.save(fos, " Tangram Build and System Information")
  fos.close()
}

task jacocoCombinedReport(type: JacocoReport) {
  // Obtain execution data from subprojects
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    html.enabled true
    html.destination "${buildDir}/reports/jacoco/test/html"
    csv.enabled false
  }
}

jacocoCombinedReport.dependsOn {
  subprojects*.test
}
