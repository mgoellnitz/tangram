/**
 *
 * Copyright 2013-2015 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import org.gradle.api.file.FileTree
import org.gradle.api.file.FileCopyDetails
import org.gradle.api.file.RelativePath

apply from: '../webapp.gradle'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'de.undercouch:gradle-download-task:2.0.0'
  }
}

apply plugin: 'de.undercouch.download'

dependencies {
  compile project(':tangram-mutable')

  testCompile "org.testng:testng:$versions.testng"

  providedCompile "$versions.servlet_api"
  providedCompile "$versions.jsp_api"
}

// Editor war containing codemirror and ckeditor locally - default is to use them from the cloud
task localWar(type: War, dependsOn: war) {
  classifier = 'local'
}

localWar.doFirst() {
  overlayWebapp(localWar)
  minifyArchive(localWar)
  String ckeditorBase = "ckeditor_${versions.ckeditor}"
  if (!(new File("$projectDir/expanded/$ckeditorBase").exists())) {
    String ckeditor = "${ckeditorBase}_standard.zip"
    def ckeditorFile = new File("$projectDir/$ckeditor")
    if (!ckeditorFile.exists()) {
      String ckeditorUrl = "http://download.cksource.com/CKEditor/CKEditor/CKEditor%20${versions.ckeditor}/${ckeditor}"
      download {
        src "$ckeditorUrl"
        dest "$projectDir"
        onlyIfNewer true
      }
    }
    if (ckeditorFile.exists()) {
      copy {
        into "$projectDir/expanded/$ckeditorBase"
        from zipTree("${ckeditorFile}")
        include "ckeditor/**"
        exclude '**/*.md', 'ckeditor/samples/**'
      }
    }
  }

  def codemirrorBase="codemirror-${versions.codemirror}"
  if (!(new File("$projectDir/expanded/$codemirrorBase").exists())) {
    def codemirrorFile = new File("$projectDir/${codemirrorBase}.zip")
    if (!codemirrorFile.exists()) {
      download {
        src "http://codemirror.net/${codemirrorBase}.zip"
        dest "$projectDir"
        onlyIfNewer true
      }
    }
    if (codemirrorFile.exists()) {
      copy {
        into "$projectDir/expanded"
        from zipTree("${codemirrorFile}")
        // We could also include themes and keymaps.
        // include "${codemirrorBasename}/lib/**", "${codemirrorBasename}/mode/**", "${codemirrorBasename}/keymap/**", "${codemirrorBasename}/theme/**"
        include "${codemirrorBase}/lib/**", "${codemirrorBase}/mode/*/*.js"
      }
    }
  }
  into('editor') {
    from fileTree("$projectDir/expanded/$ckeditorBase")
  }
  into('editor/codemirror') {
    from fileTree("$projectDir/expanded/$codemirrorBase")
    // deliberately leave out some of the very many modes
    exclude "**/mode/a*/**", "**/mode/cl*/**", "**/mode/e*/**", "**/mode/f*/**", "**/mode/gh*/**", "**/mode/ha*/**", "**/mode/id*/**", "**/mode/jad*/**", "**/mode/n*/**", "**/mode/pe*/**", "**/mode/r*/**", "**/mode/sli*/**", "**/mode/sql*/**", "**/mode/styl*/**", "**/mode/t*/**", "**/mode/veri*/**", "**/mode/xq*/**", "**/mode/y*/**", "**/mode/z*/**"
  }
}

localWar {
  // This is a strange way to get one of the smallest jars as dependency
  // included in the web archive since empty paths are not allowed here.
  classpath = 'WEB-INF/lib/javax.inject-1.jar'
  excludes = [ 'WEB-INF/classes/**', 'WEB-INF/lib/**', 'WEB-INF/include/*.jsp' ]
  into ('WEB-INF') {
    from "$projectDir/local"
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact localWar {
        classifier 'local'
        extension 'war'
      }
    }
  }
}
