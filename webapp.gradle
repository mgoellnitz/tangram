/**
 *
 * Copyright 2011-2017 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import org.apache.tools.ant.filters.ReplaceTokens
apply from: '../commons.gradle'

apply plugin: 'war'

def release = project.hasProperty('release')

// needed for building jars and wars in the same project
configurations {
  libs
  webapp
}
artifacts {
  libs jar
  archives war
}

// avoid gradles default mimik to fiddle around with this directory
webAppDirName = 'webapp'

// we want jars and wars
jar.enabled = true
war.dependsOn jar

// Use resources from jar file
// Special handling of CodeMirrir .0 releases
def cmv = "$versions.codemirror".toString()
if (cmv.lastIndexOf('.') == 1) {
  cmv += ".0"
}
jar {
  eachFile {
    if (isFilterable(it)) {
      filter(ReplaceTokens, tokens: ['codemirror_version': "$cmv".toString(), 'ckeditor_version': "$versions.ckeditor".toString()])
    }
  }
  into('META-INF/resources') {
    from fileTree("$projectDir/webapp")
  }
}

// Special handling for the war packaging
war {
  eachFile {
    if (isFilterable(it)) {
      filter(ReplaceTokens, tokens: ['codemirror_version': "$versions.codemirror".toString(), 'ckeditor_version': "$versions.ckeditor".toString()])
    }
    if(isCss(it)) {
      // it.filter(org.tangram.gradle.plugin.CSSMinify)
    }
    if(isJavaScript(it)) {
      it.filter(org.tangram.gradle.plugin.JavaScriptMinify)
    }
  }
  // This is a strange way to get one of the smallest jars as dependency
  // included in the web archive since empty paths are not allowed here.
  classpath = 'WEB-INF/lib/javax.inject-1.jar'
  excludes = [ 'WEB-INF/classes/**', 'WEB-INF/lib/**' ]
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact war {
        classifier 'war'
        extension 'war'
      }
    }
  }
}
