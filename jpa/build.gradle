/**
 *
 * Copyright 2013-2019 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import org.apache.tools.ant.filters.ReplaceTokens

apply from: '../lib.gradle'

// This is needed to let the testCompile time dependency work reliably
evaluationDependsOn(':tangram-mutable')

enhancer.enabled=false

dependencies {
  compile project(':tangram-mutable')

  // OpenJPA - just as the implementation during module creation
  // this is necessary since we use this dependency for the OpenJPA
  // enhancer
  compile ("org.apache.openjpa:openjpa:$versions.openjpa") {
    exclude group: 'asm'
  }

  testCompile "org.testng:testng:$versions.testng"
  // test logging at debug level through special logback.groovy
  testCompile "ch.qos.logback:logback-classic:$versions.logback"
  // more or less a dummy for the various autoscanned and auto injected beans
  testCompile project (':tangram-guicy')
  testCompile "org.slf4j:jul-to-slf4j:$versions.slf4j"

  testCompile project (':tangram-mutable').sourceSets.test.output
  testCompile project (':tangram-core').sourceSets.test.output
  testCompile "org.springframework:spring-core:$versions.springframework"
  testCompile "org.springframework:spring-test:$versions.springframework"
  testCompile "hsqldb:hsqldb:$versions.hsqldb"
  testCompile "net.bytebuddy:byte-buddy:$versions.byte_buddy"
  
  // TODO testProvided - only for datanucleus test.
  testCompile "org.datanucleus:datanucleus-core:$versions.datanucleus"
  testCompile "$versions.jdo_api"
  
  // TODO testProvided - only for eclipselink test.
  testCompile "org.eclipse.persistence:org.eclipse.persistence.jpa:$versions.eclipselink"
  
  // TODO testProvided - only for hibernate test.
  testCompile "org.hibernate:hibernate-core:$versions.hibernate"
}

test {
  ignoreFailures = true
}

processTestResources {
  filter(ReplaceTokens, tokens: [projectBuildDir: buildDir.toString(), projectVersion: project.version.toString(), projectName: project.name.toString()])
}

def javaClassesDir = sourceSets['main'].output.asPath
def firstPartIndex = javaClassesDir.indexOf('main')
def outputBaseDir=javaClassesDir.substring(0,firstPartIndex)
javaClassesDir=javaClassesDir.substring(0,firstPartIndex+4)

// For Java EE environments
task jeeJar(type: Jar, dependsOn: jar) {
  classifier = 'jee'
  from "$javaClassesDir"
  from "$buildDir/resources/main"
  // We need to exlude the beans.xml here and use the one from the application to control the JPA details
  exclude "META-INF/beans.xml"
  exclude "dinistiq/**"
  from "jee"
  rename ('.*-jee.xml', 'beans.xml')
}

// For DataNucleus
task datanucleusJar(type: Jar, dependsOn: jar) {
  classifier = 'datanucleus'
  from "${outputBaseDir}datanucleus"
  from "$buildDir/resources/main"
  // Otherwise in this step these classes get included
  exclude "org/tangram/jpa/test/**"
}

datanucleusJar.doFirst {
  copy {
    from "$javaClassesDir"
    into "${outputBaseDir}datanucleus"
    include '**/**'
  }
  nucleusJpaEnhance("${outputBaseDir}datanucleus")
}

// For EcliseLink
task eclipselinkJar(type: Jar, dependsOn: datanucleusJar) {
  classifier = 'eclipselink'
  from "${outputBaseDir}eclipselink"
  from "$buildDir/resources/main"
}

eclipselinkJar.doFirst {
  // uses persistence.xml in weave/ and copies all non Entity classes unchanged
  eclipselinkWeave("${outputBaseDir}eclipselink")
}

// For Hibernate - must be the last in the que
task hibernateJar(type: Jar, dependsOn: eclipselinkJar) {
  classifier = 'hibernate'
  from "${outputBaseDir}hibernate"
  from "$buildDir/resources/main"
}

hibernateJar.doFirst {
  copy {
    from "$javaClassesDir"
    into "${outputBaseDir}hibernate"
    include '**/**'
  }
  hibernateEnhance("${outputBaseDir}hibernate")
}

// For OpenJPA
task openjpaJar(type: Jar, dependsOn: hibernateJar) {
  classifier = 'openjpa'
  from "${outputBaseDir}openjpa"
  from "$buildDir/resources/main"
}

openjpaJar.doFirst {
  copy {
    from "$javaClassesDir"
    into "$buildDir/classes/java/openjpa"
    include '**/**'
  }
  // uses persistence.xml in enhance/ and copies all non Entity classes except interfaces unchanged
  openjpaEnhance("${outputBaseDir}openjpa")
}

assemble.dependsOn openjpaJar

publishing {
  publications {
    mavenJava(MavenPublication) {
      // remove any dependency for the JPA implementations
      println "removing JPA implementation dependency"
      def theCopy = pom.apiDependencies.clone()
      theCopy.each {
        if (it.groupId.equals('org.apache.openjpa')) {
          // println "removing dependency $it.groupId $it.artifactId $it.version"
          pom.apiDependencies.remove(it)
        }
      }

      artifact eclipselinkJar
      artifact hibernateJar
      artifact jeeJar
      artifact datanucleusJar
      artifact openjpaJar
    }
  }
}
