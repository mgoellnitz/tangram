/**
 * 
 * Copyright 2013-2014 Martin Goellnitz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
apply from: '../lib.gradle'

// This is needed to let the testCompile time dependency work reliably
evaluationDependsOn(':tangram-mutable')

dependencies {
  compile project(':tangram-mutable')
  
  // OpenJPA - just as the implementation during module creation
  // this is necessary since we use this dependency for the OpenJPA
  // enhancer
  compile ("org.apache.openjpa:openjpa:$versions.openjpa") {
    exclude group: 'asm'
  }
  
  // This is the API as packages with EclipseLink - which should not make
  // that much of a difference
  // compile "$versions.persistence_api"

  testCompile "junit:junit:$versions.junit"
  // bean wire up for test cases is done via dinistiq
  testCompile "dinistiq:dinistiq:$versions.dinistiq"
  // dinistiq logging at debug level through special log4j.properties
  testCompile "log4j:log4j:$versions.log4j"
  // more or less a dummy for the various autoscanned and auto injected beans
  testCompile project (':tangram-dinistiq')
  
  testCompile project (':tangram-mutable').sourceSets.test.output
  testCompile "hsqldb:hsqldb:1.8.0.10"
}

compileTestJava.dependsOn ':tangram-mutable:test'

// For EcliseLink
task eclipselinkJar(type: Jar, dependsOn: jar) {
  classifier = 'eclipselink'
  from "$buildDir/classes/eclipselink"
  from "$buildDir/resources/main"
}

eclipselinkJar.doFirst {
  // uses persistence.xml in weave/ and copies all non Entity classes unchanged
  eclipselinkWeave("$buildDir/classes/eclipselink")
}

// For Datanucleus
task nucleusJar(type: Jar, dependsOn: eclipselinkJar) {
  classifier = 'nucleus'
  from "$buildDir/classes/nucleus"
  from "$buildDir/resources/main"
  // Otherwise in this step these classes get included
  exclude "org/tangram/jpa/test/**"
}

nucleusJar.doFirst {
  copy {
    from "$buildDir/classes/main"
    into "$buildDir/classes/nucleus"
    include '**/**'
  }
  nucleusJpaEnhance("$buildDir/classes/nucleus")
}

// For OpenJPA
task openjpaJar(type: Jar, dependsOn: nucleusJar) {
  classifier = 'openjpa'
  from "$buildDir/classes/openjpa"
  from "$buildDir/resources/main"
}

openjpaJar.doFirst {
  copy {
    from "$buildDir/classes/main"
    into "$buildDir/classes/openjpa"
    include '**/**'
  }
  // uses persistence.xml in enhance/ and copies all non Entity classes except interfaces unchanged
  openjpaEnhance("$buildDir/classes/openjpa")
}

sourcesJar.dependsOn openjpaJar

publishing {
  publications {
    mavenJava(MavenPublication) {
      // remove any dependency for the JPA implementations
      Object oneDependency = pom.runtimeDependencies.iterator().next()
      ext.theCopy = pom.runtimeDependencies.clone()
      ext.theCopy.each {
        if (it != oneDependency) {
          pom.runtimeDependencies.remove(it)
        }
      }

      artifact eclipselinkJar
      artifact nucleusJar
      artifact openjpaJar
    }
  }
}
