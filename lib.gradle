/**
 * 
 * Copyright 2011-2014 Martin Goellnitz
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
import org.gradle.api.artifacts.ExcludeRule
import org.gradle.api.artifacts.ModuleDependency

apply from: '../commons.gradle'

def release = project.hasProperty('release') ? ("$release" == "true") : false 

// Since this is just a lib we need this "providedCompile" stuff explicitly here
configurations {
  libs 
  providedCompile
}

// right now this is only necessary for the libs
// http://forums.gradle.org/gradle/topics/exclude_not_set_in_generated_pom_maven_publish
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      if (release) {
        artifact sourcesJar 
        artifact javadocJar 
      }
      configurations[JavaPlugin.RUNTIME_CONFIGURATION_NAME].allDependencies.findAll {  
        it instanceof ModuleDependency && !it.excludeRules.isEmpty()  
      }.each { ModuleDependency dep ->  
        pom.withXml {  
          def xmlDep = asNode().dependencies.dependency.find {  
            it.groupId[0].text() == dep.group && it.artifactId[0].text() == dep.name  
          }
          if (xmlDep) {
            def xmlExclusions = xmlDep.exclusions[0]  
            if (!xmlExclusions) {
              xmlExclusions = xmlDep.appendNode('exclusions')
            }
            dep.excludeRules.each { ExcludeRule rule ->
              def xmlExclusion = xmlExclusions.appendNode('exclusion')  
              xmlExclusion.appendNode('groupId', rule.group)  
              xmlExclusion.appendNode('artifactId', rule.module)  
            }
          }
        }
      }
    }
  }
}
